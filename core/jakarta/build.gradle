// This is a mock project that takes the core artifact and transforms it to use the Jakarta EE namespace

ext.title = "MicroShed Testing Framework"
description="A test framework for black-box testing MicroProfile and Jakarta EE applications"

configurations {
  transformer {extendsFrom implementation}
}

dependencies {
  //API for artifact and unit testing
  api 'org.junit.jupiter:junit-jupiter-api:5.10.1'

  //Jakarta EE
  implementation 'org.eclipse:yasson:2.0.4'
  implementation 'org.eclipse.parsson:parsson:1.0.5'

  //Support Libraries
  implementation 'cglib:cglib-nodep:3.3.0'
  implementation 'org.apache.cxf:cxf-rt-rs-client:4.0.3'
  implementation 'org.apache.cxf:cxf-rt-rs-extension-providers:4.0.3'
  implementation 'org.bitbucket.b_c:jose4j:0.7.2'

  //Unit testing
  testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'

  //Transform microshed-testing-core -> microshed-testing-core-jakarta
  transformer 'org.eclipse.transformer:org.eclipse.transformer.cli:0.5.0'
}

jar {
    mustRunAfter project(':microshed-testing-core').tasks.jar
    mustRunAfter project(':microshed-testing-core').tasks.javadocJar
    mustRunAfter project(':microshed-testing-core').tasks.sourcesJar

    dependsOn    project(':microshed-testing-core').tasks.jar
    dependsOn    project(':microshed-testing-core').tasks.javadocJar
    dependsOn    project(':microshed-testing-core').tasks.sourcesJar

    def baseDir = project(':microshed-testing-core').buildDir
    def baseJars = fileTree(baseDir).matching {include 'libs/*.jar' }

    inputs.files(baseJars).skipWhenEmpty()
    outputs.dir project.buildDir

    doLast {
        new File(project.buildDir, "libs").mkdirs()
        fileTree(project.buildDir).matching { include 'libs/*.jar' }.each { delete it }

        baseJars.each { bundleJar ->
            def sourceJar = baseDir.path + '/libs/' + bundleJar.name
            println 'Source jar name [ ' + sourceJar + ' ]'

            def transformedJar = project.buildDir.path + '/libs/' + bundleJar.name.replaceAll( 'microshed-testing-core', 'microshed-testing-core-jakarta' )
            println 'Transformed jar name [ ' + transformedJar + ' ]'

            def transformerArgs = [sourceJar, transformedJar]

            javaexec {
                classpath configurations.transformer
                main = 'org.eclipse.transformer.cli.JakartaTransformerCLI'
                args = transformerArgs
            }
        }
    }
}

apply from: publishScript

javadocJar {
    mustRunAfter jar
    dependsOn    jar
}

sourcesJar {
    mustRunAfter jar
    dependsOn    jar
}

publishToMavenLocal.dependsOn ':microshed-testing-core:publishToMavenLocal'

